[virtual_sdcard]
path = ~/printer_data/gcodes

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
	{% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
	_TOOLHEAD_PARK_PAUSE_CANCEL
	{% endif %}
	M106 S0
	TURN_OFF_HEATERS
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
gcode = 
	{% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
	{% if 'VELOCITY' in params|upper %}
	{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
	{%else %}
	{% set get_params = "" %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude = 1.0
gcode = 
	{% set x_park = -5|float %}
	{% set y_park = 155|float %}
	{% set z_park_delta = 2.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - z_park_delta) %}
	{% set z_safe = z_park_delta %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	{% if printer.extruder.can_extrude|lower == 'true' %}
	M83
	G1 E-{extrude} F2100
	{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}
	G91
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000
	{% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro SQUARE]
gcode = 
	{% set LAPS = params.LAPS|int %}
	{% set FEEDRATE = params.FEEDRATE|int %}
	{% for wipe in range(LAPS) %}
	G0 F{FEEDRATE*60}
	G0 X0 Y0
	G0 X310 Y0
	G0 X310 Y310
	G0 X0 Y310
	{% endfor %}

[gcode_macro START_PRINT]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
	{% set BED_TEMP = params.BED_TEMP|float %}
	{% set DETRACT_DISTANCE = params.DETRACT|default(5)|float %}
	{% set DETRACT_FEEDRATE = params.DETRACT_FEEDRATE|default(120)|float %}
	M190 S{BED_TEMP}
	G28
	BED_MESH_CALIBRATE
	G1 X0 Y155 F{120*60}
	M109 S{EXTRUDER_TEMP}
	; Detract filament
	ADAPTIVE_PURGE
	M107
	G21 ; set units to millimeters
	G90 ; use absolute coordinates
	M83 ; use relative distances for extrusion

[gcode_macro END_PRINT]
gcode = 
	{% set RETRACT_DISTANCE = params.RETRACT|default(-5)|float %}
	{% set RETRACT_FEEDRATE = params.DETRACT_FEEDRATE|default(120)|float %}
	G1 X0 Y310 F{120*60}
	TURN_OFF_HEATERS
	; Retract Filament
	M83
	G1 E{RETRACT_DISTANCE} F{RETRACT_FEEDRATE*60}

[gcode_macro move_bed_up]
gcode = 
	{% set FEEDRATE = params.FEEDRATE|default(100)|float %}
	{% set POSITION = params.POSITION|default(300)|float %}
	SET_KINEMATIC_POSITION Z={POSITION}
	G1 Z0 F{FEEDRATE*60}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
variable_led_enable = False
variable_status_macro = 'status_meshing'
variable_fuzz_enable = False
variable_fuzz_min = 0
variable_fuzz_max = 4
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
gcode = 
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	{ action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
	all_points | count,
	bed_mesh_min,
	bed_mesh_max,
	)) }
	{% if fuzz_enable == True %}
	{% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}
	{% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}
	{% else %}
	{% set x_min = [ bed_mesh_min[0], x_min ] | max %}
	{% set y_min = [ bed_mesh_min[1], y_min ] | max %}
	{% set x_max = [ bed_mesh_max[0], x_max ] | min %}
	{% set y_max = [ bed_mesh_max[1], y_max ] | min %}
	{% endif %}
	{ action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
	(x_min, y_min),
	(x_max, y_max),
	)) }
	{% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	{ action_respond_info( "Algorithm: {}".format(algorithm)) }
	{% set points_x = [points_x, min_points]|max  %}
	{% set points_y = [points_y, min_points]|max  %}
	{ action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }
	{% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
	{% set ref_index = (points_x * points_y / 2) | int %}
	{ action_respond_info( "Reference index: {}".format(ref_index) ) }
	{% else %}
	{% set ref_index = -1 %}
	{% endif %}
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	{% if led_enable == True %}
	{status_macro}
	{% endif %}
	_BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro ADAPTIVE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_tip_distance = 10
variable_purge_amount = 20
variable_flow_rate = 10
variable_x_default = 10
variable_y_default = 10
variable_size = 10
variable_distance_to_object_x = 10
variable_distance_to_object_y = 10
gcode = 
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
	{% set prepurge_speed = flow_rate / 2.405 %}
	{% set travel_speed = 120 %}
	{ action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
	G92 E0
	G0 F{travel_speed*60}
	G90
	G0 X{x_origin} Y{y_origin+size/2}
	G0 Z{z_height}
	M83
	G1 E{tip_distance} F{prepurge_speed*60}
	G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60}
	G1 E-.5 F2100
	G0 Z{z_height*2}
	G0 X{x_origin+size*0.789} Y{y_origin+size}
	G0 Z{z_height}
	G1 E.5 F2100
	G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}
	G1 E-.5 F2100
	G0 Z{z_height*2}
	G0 X{x_origin+size*0.711} Y{y_origin}
	G0 Z{z_height}
	G1 E.5 F2100
	G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height*2}

[temperature_sensor M8P]
sensor_type = temperature_mcu

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
microsteps = 16
rotation_distance = 32
full_steps_per_rotation = 200
endstop_pin = ebb36:PB3
position_endstop = -1
position_min = -26
position_max = 355
homing_speed = 120
homing_retract_dist = 0

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
microsteps = 16
rotation_distance = 32
full_steps_per_rotation = 200
endstop_pin = PF5
position_endstop = 339
position_min = -23
position_max = 339
homing_speed = 120
homing_retract_dist = 0

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
microsteps = 16
rotation_distance = 8
full_steps_per_rotation = 400
endstop_pin = probe:z_virtual_endstop
position_max = 345
position_min = -5

[heater_bed]
heater_pin = PB7
sensor_type = Generic 3950
sensor_pin = PA0
control = pid
pid_kp = 53.052
pid_ki = 2.390
pid_kd = 294.436
min_temp = 0
max_temp = 130
pwm_cycle_time = 0.02

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_M8P-if00

[printer]
kinematics = corexy
max_velocity = 500
max_accel = 8800
max_accel_to_decel = 8800
max_z_velocity = 100
max_z_accel = 500
square_corner_velocity = 5

[tmc2209 stepper_x]
uart_pin = PC10
diag_pin = PF3
run_current = 0.5
stealthchop_threshold = 0
interpolate = True

[tmc2209 stepper_y]
uart_pin = PF13
diag_pin = PF4
run_current = 0.5
stealthchop_threshold = 0
interpolate = True

[tmc2209 stepper_z]
uart_pin = PF9
diag_pin = PF5
run_current = 1.0
stealthchop_threshold = 999999
interpolate = True

[controller_fan motor_a_fan]
pin = PC12
max_power = 1.0
shutdown_speed = 0.0
fan_speed = 1.0
stepper = stepper_x

[controller_fan motor_b_fan]
pin = PE5
max_power = 1.0
shutdown_speed = 0.0
fan_speed = 1.0
stepper = stepper_y

[controller_fan board_fan]
pin = PE0
max_power = 1.0
shutdown_speed = 0.0
fan_speed = 1.0

[led lighting]
white_pin = PE6

[filament_motion_sensor smart_filament_sensor]
detection_length = 7.0
extruder = extruder
switch_pin = PC2
pause_on_runout = True

[safe_z_home]
home_xy_position = 195.9,160.6
speed = 120.0
z_hop = 5
z_hop_speed = 15.0
move_to_previous = False

[board_pins]
aliases = 
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[mcu ebb36]
canbus_uuid = 3694467442d6

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = ebb36

[adxl345]
cs_pin = ebb36: PB12
spi_software_sclk_pin = ebb36: PB10
spi_software_mosi_pin = ebb36: PB11
spi_software_miso_pin = ebb36: PB2
axes_map = x,y,z

[resonance_tester]
accel_chip = adxl345
probe_points = 
	155, 155, 20

[extruder]
step_pin = ebb36: PD0
dir_pin = ebb36: PD1
enable_pin = !ebb36: PD2
microsteps = 16
full_steps_per_rotation = 200
rotation_distance = 4.7118288
max_extrude_cross_section = 50
max_extrude_only_distance = 500
max_extrude_only_velocity = 60
max_extrude_only_accel = 600
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = ebb36: PB13
sensor_type = ATC Semitec 104GT-2
sensor_pin = ebb36: PA3
control = pid
pid_kp = 20.497
pid_ki = 0.849
pid_kd = 123.751
min_temp = 0
max_temp = 300
min_extrude_temp = 0

[tmc2209 extruder]
uart_pin = ebb36: PA15
run_current = 0.500
hold_current = 0.100
stealthchop_threshold = 0
interpolate = False

[fan]
pin = ebb36: PA0

[heater_fan hotend_fan]
pin = ebb36: PA1
heater = extruder
heater_temp = 50.0
shutdown_speed = 1

[bltouch]
sensor_pin = ^ebb36:PB8
control_pin = ebb36:PB9
pin_move_time = 0.680
stow_on_each_sample = False
probe_with_touch_mode = True
pin_up_reports_not_triggered = True
pin_up_touch_mode_reports_triggered = True
x_offset = -40.9
y_offset = -5.6
speed = 15.0
samples = 1
sample_retract_dist = 2.0
samples_result = median
samples_tolerance = 0.100
samples_tolerance_retries = 0
z_offset = 2.700

[mcu u2c]
canbus_uuid = 3d0896b621cd

[temperature_sensor U2C]
sensor_type = temperature_mcu
sensor_mcu = u2c

[mcu host]
serial = /tmp/klipper_host_mcu

[temperature_sensor CB1]
sensor_type = temperature_host
min_temp = 10
max_temp = 85

[idle_timeout]
gcode = 

[exclude_object]

[force_move]
enable_force_move = True

[bed_screws]
screw1 = 35,35
screw1_name = Lower Left
screw2 = 275,275
screw2_name = Upper Right
screw3 = 35,275
screw3_name = Upper Left
screw4 = 275,35
screw4_name = Lower Right

[screws_tilt_adjust]
screw1 = 75.9,40.6
screw1_name = Lower Left
screw2 = 75.9,280.6
screw2_name = Upper Left
screw3 = 315.9,280.6
screw3_name = Upper Right
screw4 = 315.9,40.6
screw4_name = Lower Right
speed = 120
horizontal_move_z = 10
screw_thread = CW-M3

[respond]

[save_variables]
filename = ~/variables.cfg

[bed_mesh]
speed = 120
horizontal_move_z = 5
mesh_min = 25, 25
mesh_max = 285,265
probe_count = 9
algorithm = bicubic

[bed_mesh default]
version = 1
points = 
	0.043750, 0.046250, 0.070000, 0.055000, 0.087500, 0.086250, 0.085000, 0.100000
	0.042500, 0.032500, 0.048750, 0.032500, 0.068750, 0.072500, 0.078750, 0.111250
	-0.012500, -0.003750, 0.023750, 0.001250, 0.007500, 0.041250, 0.060000, 0.037500
	-0.006250, -0.018750, 0.002500, -0.001250, 0.001250, 0.015000, 0.026250, 0.018750
	0.031250, 0.037500, 0.026250, 0.005000, 0.027500, 0.055000, 0.048750, 0.050000
	0.076250, 0.096250, 0.117500, 0.097500, 0.097500, 0.113750, 0.116250, 0.105000
	0.148750, 0.131250, 0.138750, 0.140000, 0.153750, 0.147500, 0.132500, 0.152500
	0.133750, 0.138750, 0.133750, 0.148750, 0.156250, 0.146250, 0.163750, 0.150000
tension = 0.2
min_x = 55.74
algo = bicubic
y_count = 8
mesh_y_pps = 2
min_y = 56.08
x_count = 8
max_y = 254.04
mesh_x_pps = 2
max_x = 253.7

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 58.8
shaper_type_y = mzv
shaper_freq_y = 39.4
